/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

// zmk files
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// placeholder names to make layers more readable
#define DEF 0
#define QRZ 1
#define ALT_C 2
#define WN_C 3
#define GAME 4
#define NUM 5
#define SYM 6
#define NAV 7

// my own headers
#include "keys_helper.h"
#include "unicode_helper.h"
#include "combos_helper.h"

// ms timings for homerow mods for each side
#define HOMEROW_TAPPING_TERM 280
#define HOMEROW_QUICK_TAP 150 // ca. 10500/(relaxed typing speed)

&sk {  // sticky-key config
    release-after-ms = <600>; // release after 0.6s
    quick-release; // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers; // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <HOMEROW_QUICK_TAP>;
};

&caps_word { // mods don't deactivate caps-word anymore
    /delete-property/ ignore-modifiers;
};

/ {
    // https://zmk.dev/docs/features/conditional-layers
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NUM SYM>;
            then-layer = <NAV>;
        };
    };
    
    macros {
        dollar_euro: dollar_euro_macro {
            compatible = "zmk,behavior-macro";
            label = "dollar_euro_macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings = <LINUX_UNICODE_LEAD>, <&macro_tap UNICODE_EURO>, <LINUX_UNICODE_TRAIL>; // defined in unicode helper
        };
    };

    behaviors { 
        // tap -> dollar | shift + tap -> euro
        dllr_euro: dllr_euro {
            compatible = "zmk,behavior-mod-morph";
            label = "dollar_euro_mod_morph";
            #binding-cells = <0>;
            bindings = <&kp DLLR>, <&dollar_euro>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            tapping-term-ms = <HOMEROW_TAPPING_TERM>;
            quick-tap-ms = <HOMEROW_QUICK_TAP>;
            global-quick-tap;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <RSIDE THUMBS>;
            hold-trigger-on-release; 
        };
        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            tapping-term-ms = <HOMEROW_TAPPING_TERM>;
            quick-tap-ms = <HOMEROW_QUICK_TAP>;
            global-quick-tap;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <LSIDE THUMBS>;
            hold-trigger-on-release; 
        };
        // tap -> sticky shift | shift + tap or double tap -> caps-word | hold -> shift
        smart_shft: smart_shft {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        gqt: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
        // tap or hold -> LALT | double tap -> Caps Lock
        alt_caps: alt_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "ALT_CAPS";
            #binding-cells = <0>;
            tapping-term-ms = <50>;
            bindings = <&kp LALT>, <&kp CAPS>;
        };
    };

// workaround to type += fast because of this issue: https://github.com/zmkfirmware/zmk/issues/1076
    macros {
        plus_equals: plus_equals_macro {
            compatible = "zmk,behavior-macro";
            label = "plus_equals_macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings = <&kp PLUS>, <&kp EQUAL>; // defined in unicode helper
        };
    };
    combos {
        compatible = "zmk,combos";
        combo_plus_equals {
            timeout-ms = <HOMEROW_QUICK_TAP>;
            key-positions = <32 33>;
            bindings = <&plus_equals>;
            layers = <SYM>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
// -----------------------------------------------------------------------------------------
// | TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U  |  I  |  O  |  P  | BKSP |
// | ESC |  A  |  S  |  D  |  F  |  G  |   |  H  |  J  |  K  |  L  |  ;  |  '   |
// | SHFT|  Z  |  X  |  C  |  V  |  B  |   |  N  |  M  |  ,  |  .  |  /  | RET  |
//                   | TAB | ESC | SPC |   | SHFT| BKSP| RET |
            bindings = <
    &kp TAB   &kp Q       &kp W       &kp E         &kp R        &kp T     /**/ &kp Y       &kp U        &kp I        &kp O       &kp P          &kp BSPC
    &kp ESC   &hml LGUI A &hml LALT S &hml LCTRL D  &hml LSHFT F &kp G     /**/ &kp H       &hmr LSHFT J &hmr LCTRL K &hmr LALT L &hmr LGUI SEMI &kp SQT
    &kp LSHFT &kp Z       &kp X       &kp C         &kp V        &kp B     /**/ &kp N       &kp M        &kp COMMA    &kp DOT     &kp FSLH       &kp RET
                                      &mt LCTRL TAB &lt NUM ESC  &kp SPACE /**/ &smart_shft &lt SYM BSPC &lt NAV RET
            >;
        };

// convinient lookup table: https://gist.github.com/eckig/406619a5de8a575768632a88d18c2a73
        qwertz_layer {
// -----------------------------------------------------------------------------------------
// | TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U  |  I  |  O  |  P  | BKSP |
// | ESC |  A  |  S  |  D  |  F  |  G  |   |  H  |  J  |  K  |  L  |  ;  |  '   |
// | SHFT|  Z  |  X  |  C  |  V  |  B  |   |  N  |  M  |  ,  |  .  |  /  | RET  |
//                   | TAB | ESC | SPC |   | SHFT| BKSP| RET |
            bindings = <
    &kp TAB   &kp Q       &kp W       &kp E         &kp R        &kp T     /**/ &kp Z       &kp U        &kp I        &kp O       &kp P          &kp BSPC
    &kp ESC   &hml LGUI A &hml LALT S &hml LCTRL D  &hml LSHFT F &kp G     /**/ &kp H       &hmr LSHFT J &hmr LCTRL K &hmr LALT L &hmr LGUI SEMI &kp SQT
    &kp LSHFT &kp Y       &kp X       &kp C         &kp V        &kp B     /**/ &kp N       &kp M        &kp COMMA    &kp DOT     &kp FSLH       &kp RET
                                      &mt LCTRL TAB &lt NUM ESC  &kp SPACE /**/ &smart_shft &lt SYM BSPC &lt NAV RET
            >;
        };

// check out urobs zmk-nodefree-config

// the only thing that changes in those is what the umlaut combo does in the background
        unicode_alt_layer {
            bindings = <
    &trans &trans &trans &trans &trans &trans /**/ &trans &trans &trans &trans &trans &trans
    &trans &trans &trans &trans &trans &trans /**/ &trans &trans &trans &trans &trans &trans
    &trans &trans &trans &trans &trans &trans /**/ &trans &trans &trans &trans &trans &trans
                         &trans &trans &trans /**/ &trans &trans &trans
            >;
        };

        windows_compose_layer {
            bindings = <
    &trans &trans &trans &trans &trans &trans /**/ &trans &trans &trans &trans &trans &trans
    &trans &trans &trans &trans &trans &trans /**/ &trans &trans &trans &trans &trans &trans
    &trans &trans &trans &trans &trans &trans /**/ &trans &trans &trans &trans &trans &trans
                         &trans &trans &trans /**/ &trans &trans &trans
            >;
        };

        gaming_layer {
// -----------------------------------------------------------------------------------------
// | TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U  |  I  |  O  |  P  | BSPC |
// | LALT|  A  |  S  |  D  |  F  |  G  |   |  H  |  J  |  K  |  L  |  ;  |  '   |
// | LSFT|  Z  |  X  |  C  |  V  |  B  |   |  N  |  M  |  ,  |  .  |  /  | RET  |
//                   |     |     |     |   |     |     |     |
            bindings = <
    &kp TAB   &kp Q &kp W &kp E     &kp R  &kp T  /**/ &trans &trans &trans &trans &trans &trans
    &alt_caps &kp A &kp S &kp D     &kp F  &kp G  /**/ &trans &trans &trans &trans &trans &trans
    &kp LSHFT &kp Z &kp X &kp C     &kp V  &kp B  /**/ &trans &trans &trans &trans &trans &trans
                          &kp LCTRL &trans &trans /**/ &trans &trans &trans
            >;
        };

        number_layer {
// -----------------------------------------------------------------------------------------
// |     |  /  |  7  |  8  |  9  |  .  |   | BT3 |  F7 |  F8 |  F9 | F12 |BLCLR|
// |     |  *  |  4  |  5  |  6  |  +  |   | BT2 |  F4 |  F5 |  F6 | F11 | BT5 |
// |     |  0  |  1  |  2  |  3  |  -  |   | BT1 |  F1 |  F2 |  F3 | F10 | BT4 |
//                   |     |     |     |   |     |     |     |
            bindings = <
    &trans &kp FSLH       &kp N7       &kp N8        &kp N9        &kp DOT   /**/ &bt BT3 &kp F7        &kp F8        &kp F9       &kp F12       &bt BTC
    &trans &hml LGUI STAR &hml LALT N4 &hml LCTRL N5 &hml LSHFT N6 &kp PLUS  /**/ &bt BT2 &hmr LSHFT F4 &hmr LCTRL F5 &hmr LALT F6 &hmr LGUI F11 &bt BT5
    &trans &kp N0         &kp N1       &kp N2        &kp N3        &kp MINUS /**/ &bt BT1 &kp F1        &kp F2        &kp F3       &kp F10       &bt BT4
                                       &trans        &trans        &trans    /**/ &trans  &lt SYM DEL   &trans
            >;
        };

        symbol_layer {
// -----------------------------------------------------------------------------------------
// |     |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  =  |  -  |     |
// |     |  ~  |  [  |  {  |  (  |  /  |   |  \  |  )  |  }  |  ]  |  _  |     |
// |     |     |  -  |  =  |  `  |  '  |   |  "  |  -  |  +  |  =  | "|" |     |
//                   |     |     |     |   |     |     |     |
            bindings = <
    &trans    &kp EXCL        &kp AT         &kp HASH        &dllr_euro      &kp PRCNT /**/ &kp CARET &kp AMPS        &kp STAR        &kp EQUAL      &kp MINUS       &trans
    &trans    &hml LGUI TILDE &hml LALT LBKT &hml LCTRL LBRC &hml LSHFT LPAR &kp FSLH  /**/ &kp BSLH  &hmr LSHFT RPAR &hmr LCTRL RBRC &hmr LALT RBKT &hmr LGUI UNDER &trans
    &trans    &trans          &kp MINUS      &kp EQUAL       &kp GRAVE       &kp SQT   /**/ &kp DQT   &kp MINUS       &kp PLUS        &kp EQUAL      &kp PIPE        &trans
                                             &trans          &trans          &trans    /**/ &trans    &trans          &trans
            >;
        };

        navigation_layer {
// -----------------------------------------------------------------------------------------
// |     |  <- |WRDLE| PLAY|  -> |     |   |     |PRETAB|NXTTAB|     |     | DEL |
// |     | LFT | DWN |  UP | RGT |     |   | LEFT| DOWN |  UP  |RIGHT| GUI |     |
// |     |toDEF|toALT|toWNC|toGME|WRDRI|   |BRIDC|VOLDWN| VOLUP|BRIIC|     |     |
//                   |     |     |     |   |     |      |      |
            bindings = <
    &trans &kp C_PREV     &kp LC(RIGHT)   &kp C_PP         &kp C_NEXT     &trans       /**/ &trans        &trans          &kp LC(PG_UP) &kp LC(PG_DN)   &trans   &kp DEL
    &trans &hml LGUI HOME &hml LALT PG_DN &hml LCTRL PG_UP &hml LSHFT END &trans       /**/ &kp LEFT      &hmr LSHFT DOWN &hmr LCTRL UP &hmr LALT RIGHT &kp LGUI &trans
    &trans &to DEF        &to ALT_C       &to WN_C         &to GAME       &kp LC(LEFT) /**/ &kp C_BRI_DEC &kp C_VOL_DN    &kp C_VOL_UP  &kp C_BRI_INC   &trans   &trans
                                          &trans           &trans         &trans       /**/ &trans        &trans          &trans
            >;
        };
    };
};