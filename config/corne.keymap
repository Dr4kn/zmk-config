/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define NUM 1
#define SYM 2
#define NAV 3

#define BT1 BT_SEL 0
#define BT2 BT_SEL 1
#define BT3 BT_SEL 2
#define BT4 BT_SEL 3
#define BT5 BT_SEL 4
#define BTC BT_CLR

/*
    |  0  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  | 10  |  11  |
    | 12  | 13  | 14  | 15  | 16  | 17  |   | 18  | 19  | 20  | 21  | 22  |  23  |
    | 24  | 25  | 26  | 27  | 28  | 29  |   | 30  | 31  | 32  | 33  | 34  |  35  |
                     | 36  | 37  | 38  |   | 39  | 40  | 41  |
Shorterhandels for keyrow mods
    with multiple different layouts you mostly need to change the definitions.
*/

#define L1 0 1 2 3 4 5
#define L2 12 13 14 15 16 17
#define L3 24 25 26 27 28 29

#define R1 6 7 8 9 10 11
#define R2 18 19 20 21 22 23
#define R3 30 31 32 33 34 35

#define TL 36 37 38
#define TR 39 40 41

#define LSIDE L1 L2 L3
#define RSIDE R1 R2 R3
#define THUMBS TL TR

// homerows in the layout
#define LHR L2
#define RHR R2

// keycodes used in unicode combos
#define UC_A 13
#define UC_O 9
#define UC_U 7
#define UC_E 3
#define UC_S 14
#define UC_Z 25

// ms timings for homerow mods for each side
#define HOMEROW_TAPPING_TERM 280
#define HOMEROW_QUICK_TAP 150 // ca. 10500/(relaxed typing speed)

// key presses to activate unicode entry on the operating systems
#define LINUX_UNICODE_LEAD &macro_tap &kp LS(LC(U))
#define LINUX_UNICODE_TRAIL &macro_tap &kp SPACE
// needs windows compose to work
#define COMPOSE_UNICODE_LEAD &macro_tap &kp RALT &kp U
#define COMPOSE_UNICODE_TRAIL &macro_tap &kp RET
// macOS and Windows-Alt-Codes
#define ALT_CODE_LEAD &macro_press &kp LALT
#define ALT_CODE_TRAIL &macro_release &kp LALT

#define UNICODE_EURO &kp N2 &kp N0 &kp A &kp C

#define ZMK_HELPER_STRINGIFY(x) #x

#define UC_MACRO(name, unicode_lead, unicode_bindings, unicode_trail) \
    / { \
        macros { \
            name: name { \
                compatible = "zmk,behavior-macro"; \
                label = ZMK_HELPER_STRINGIFY(UC_MACRO_ ## name); \
                wait-ms = <0>; \
                tap-ms = <0>; \
                #binding-cells = <0>; \
                bindings  \
                    = <unicode_lead> \
                    , <&macro_tap unicode_bindings> \
                    , <unicode_trail> \
                    ; \
            }; \
        }; \
    };

#define UC_MODMORPH(name, uc_binding, shifted_uc_binding) \
    / { \
        behaviors { \
            name: name { \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(UC_MORPH_ ## name); \
                #binding-cells = <0>; \
                bindings = <uc_binding>, <shifted_uc_binding>; \
                mods = <(MOD_LSFT|MOD_RSFT)>; \
            }; \
        }; \
    };


#define UC_COMBO(name, key_position_one, key_position_two, layer) \
    / { \
        combos { \
            compatible = "zmk,combos"; \
            name { \
                timeout-ms = <250>; \
                key-positions = <key_position_one key_position_two>; \
                bindings = <&name>; \
                layers = <layer>; \
            }; \
        }; \
    };

#define ZMK_UNICODE_PAIR(name, unicode_lead, unicode_trail, L0, L1, L2, L3, U0, U1, U2, U3) \
    UC_MACRO(name ## _lower, unicode_lead, &kp L0 &kp L1 &kp L2 &kp L3, unicode_trail) \
    UC_MACRO(name ## _upper, unicode_lead, &kp U0 &kp U1 &kp U2 &kp U3, unicode_trail) \
    UC_MODMORPH(name, &name ## _lower, &name ## _upper)

// German umlauts in Unicode for Linux
ZMK_UNICODE_PAIR(   ln_ae, LINUX_UNICODE_LEAD, LINUX_UNICODE_TRAIL, N0, N0,  E, N4,    N0, N0,  C, N4)
ZMK_UNICODE_PAIR(   ln_oe, LINUX_UNICODE_LEAD, LINUX_UNICODE_TRAIL, N0, N0,  F, N6,    N0, N0,  D, N6)
ZMK_UNICODE_PAIR(   ln_ue, LINUX_UNICODE_LEAD, LINUX_UNICODE_TRAIL, N0, N0,  F,  C,    N0, N0,  D,  C)
ZMK_UNICODE_PAIR(   ln_sz, LINUX_UNICODE_LEAD, LINUX_UNICODE_TRAIL, N0, N0,  D,  F,    N1, E,  N9,  E)

// German umlauts in Unicode for Windows Compose
// ZMK_UNICODE_PAIR(   wnc_ae, COMPOSE_UNICODE_LEAD, COMPOSE_UNICODE_TRAIL, N0, N0,  E, N4,    N0, N0,  C, N4)
// ZMK_UNICODE_PAIR(   wnc_oe, COMPOSE_UNICODE_LEAD, COMPOSE_UNICODE_TRAIL, N0, N0,  F, N6,    N0, N0,  D, N6)
// ZMK_UNICODE_PAIR(   wnc_ue, COMPOSE_UNICODE_LEAD, COMPOSE_UNICODE_TRAIL, N0, N0,  F,  C,    N0, N0,  D,  C)
// ZMK_UNICODE_PAIR(   wnc_sz, COMPOSE_UNICODE_LEAD, COMPOSE_UNICODE_TRAIL, N0, N0,  D,  F,    N1, E,  N9,  E)

// For Windows-Alt-Codes
// ZMK_UNICODE_PAIR(   wn_ae, ALT_CODE_LEAD, ALT_CODE_TRAIL, KP_N0, KP_N2, KP_N2, KP_N8,    KP_N0, KP_N1, KP_N9, KP_N6)
// ZMK_UNICODE_PAIR(   wn_oe, ALT_CODE_LEAD, ALT_CODE_TRAIL, KP_N0, KP_N2, KP_N4, KP_N6,    KP_N0, KP_N2, KP_N1, KP_N4)
// ZMK_UNICODE_PAIR(   wn_ue, ALT_CODE_LEAD, ALT_CODE_TRAIL, KP_N0, KP_N2, KP_N5, KP_N2,    KP_N0, KP_N2, KP_N2, KP_N0)
// ZMK_UNICODE_PAIR(   wn_sz, ALT_CODE_LEAD, ALT_CODE_TRAIL, KP_N0, KP_N2, KP_N2, KP_N3,    KP_N7, KP_N8, KP_N3, KP_N8)

UC_COMBO(ln_ae, UC_A, UC_E, 0)
UC_COMBO(ln_oe, UC_O, UC_E, 0)
UC_COMBO(ln_ue, UC_U, UC_E, 0)
UC_COMBO(ln_sz, UC_S, UC_Z, 0)

&sk {  // sticky-key config
    release-after-ms = <600>; // release after 0.6s
    quick-release; // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers; // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <HOMEROW_QUICK_TAP>;
};


&caps_word { // mods don't deactivate caps-word anymore
    /delete-property/ ignore-modifiers;
};

/ {
    // https://zmk.dev/docs/features/conditional-layers
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
    
    macros {
        dollar_euro: dollar_euro_macro {
            compatible = "zmk,behavior-macro";
            label = "dollar_euro_macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings = <LINUX_UNICODE_LEAD>, <&macro_tap UNICODE_EURO>, <LINUX_UNICODE_TRAIL>;
        };
    };

    behaviors { 
        /* 
            a lot of things are copied or heavily inspired by https://github.com/urob/zmk-config#timeless-homerow-mods
        */
        // tap -> dollar | shift + tap -> euro
        dllr_euro: dllr_euro {
            compatible = "zmk,behavior-mod-morph";
            label = "dollar_euro_mod_morph";
            #binding-cells = <0>;
            bindings = <&kp DLLR>, <&dollar_euro>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            tapping-term-ms = <HOMEROW_TAPPING_TERM>;
            quick-tap-ms = <HOMEROW_QUICK_TAP>;
            global-quick-tap;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <RSIDE THUMBS>;
            hold-trigger-on-release; 
        };
        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            tapping-term-ms = <HOMEROW_TAPPING_TERM>;
            quick-tap-ms = <HOMEROW_QUICK_TAP>;
            global-quick-tap;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <LSIDE THUMBS>;
            hold-trigger-on-release; 
        };
        // tap -> sticky shift | shift + tap or double tap -> caps-word | hold -> shift
        smart_shft: smart_shft {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    }; 

    keymap {
        compatible = "zmk,keymap";

        default_layer {
// -----------------------------------------------------------------------------------------
// | TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U  |  I  |  O  |  P  | BKSP |
// | ESC |  A  |  S  |  D  |  F  |  G  |   |  H  |  J  |  K  |  L  |  ;  |  '   |
// | SHFT|  Z  |  X  |  C  |  V  |  B  |   |  N  |  M  |  ,  |  .  |  /  | RET  |
//                   | ESC | NAV | SPC |   | TAB | ENT | RET |
            bindings = <
    &kp TAB   &kp Q       &kp W       &kp E         &kp R        &kp T     /**/ &kp Y       &kp U        &kp I        &kp O       &kp P          &kp BSPC
    &kp ESC   &hml LGUI A &hml LALT S &hml LCTRL D  &hml LSHFT F &kp G     /**/ &kp H       &hmr RSHFT J &hmr LCTRL K &hmr LALT L &hmr LGUI SEMI &kp SQT
    &kp LSHFT &kp Z       &kp X       &kp C         &kp V        &kp B     /**/ &kp N       &kp M        &kp COMMA    &kp DOT     &kp FSLH       &kp RET
                                      &mt LCTRL TAB &lt NUM ESC  &kp SPACE /**/ &smart_shft &lt SYM BSPC &lt NAV RET
            >;
        };

        number_layer {
// -----------------------------------------------------------------------------------------
// | TAB |  /  |  7  |  8  |  9  |  .  |   | BT3 |  F7 |  F8 |  F9 | F12 |BLCLR|
// | ESC |  *  |  4  |  5  |  6  |  +  |   | BT2 |  F4 |  F5 |  F6 | F11 | BT5 |
// | SHFT|  0  |  1  |  2  |  3  |  -  |   | BT1 |  F1 |  F2 |  F3 | F10 | BT4 |
//                   | ESC | NAV | SPC |   | TAB | DEL | RET |
            bindings = <
    &kp TAB   &kp FSLH       &kp N7       &kp N8        &kp N9        &kp DOT   /**/ &bt BT3 &kp F7        &kp F8        &kp F9       &kp F12       &bt BTC
    &kp ESC   &hml LGUI STAR &hml LALT N4 &hml LCTRL N5 &hml LSHFT N6 &kp PLUS  /**/ &bt BT2 &hmr RSHFT F4 &hmr LCTRL F5 &hmr LALT F6 &hmr LGUI F11 &bt BT5
    &kp LSHFT &kp N0         &kp N1       &kp N2        &kp N3        &kp MINUS /**/ &bt BT1 &kp F1        &kp F2        &kp F3       &kp F10       &bt BT4
                                          &trans        &trans        &trans    /**/ &trans  &trans        &trans
            >;
        };

        symbol_layer {
// -----------------------------------------------------------------------------------------
// | TAB |  !  |  ^  |  #  |  $  |  %  |   |  &  |  Ü  |  *  |  Ö  |  `  | DEL |
// |  `  |  Ä  |  [  |  {  |  (  |  /  |   |  \  |  )  |  }  |  ]  |  _  |  ~  |
// | SHFT|  @  |  ß  |  +  |  =  |  -  |   |  `  |  =  |  -  |  +  | "|" | RET |
//                   | ESC | NAV | SPC |   | TAB | DEL | RET |
            bindings = <
    &kp  TAB  &kp EXCL        &kp CARET      &kp HASH        &dllr_euro      &kp PRCNT /**/ &kp AMPS  &ln_ue          &kp STAR        &ln_oe         &kp GRAVE       &kp DEL
    &kp GRAVE &hml LGUI RA(Q) &hml LALT LBKT &hml LCTRL LBRC &hml LSHFT LPAR &kp FSLH  /**/ &kp BSLH  &hmr RSHFT RPAR &hmr LCTRL RBRC &hmr LALT RBKT &hmr LGUI UNDER &kp TILDE
    &kp LSHFT &kp AT          &ln_sz         &kp PLUS        &kp EQUAL       &kp MINUS /**/ &kp GRAVE &kp EQUAL       &kp MINUS       &kp PLUS       &kp PIPE        &kp RET
                                             &trans          &trans          &trans    /**/ &trans    &trans          &trans
            >;
        };

        navigation_layer {
// -----------------------------------------------------------------------------------------
// | TAB |  <- | C_DN| C_UP|  -> |     |   |     |     |     |     | CPP | DEL |
// |  `  | LFT | DWN |  UP | RGT |     |   |     | HOME|PG_DN|PG_UP| END |     |
// | SHFT| SHFT| CTRL| GUI | LALT| RALT|   | LALT| RALT| LGUI| CTRL| SHFT| RET |
//                   | ESC | NAV | SPC |   | TAB | DEL | RET |
            bindings = <
    &kp TAB   &kp C_PREV &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT &trans   /**/ &trans    &trans   &trans    &trans    &kp C_PP  &kp DEL
    &kp ESC   &kp LEFT   &kp DOWN     &kp UP       &kp RIGHT  &trans   /**/ &kp LSHFT &kp HOME &kp PG_DN &kp PG_UP &kp END   &trans
    &kp LSHFT &kp LSHFT  &kp LCTRL    &kp LGUI     &kp LALT   &kp RALT /**/ &kp LALT  &kp RALT &kp LGUI  &kp LCTRL &kp LSHFT &kp RET
                                      &trans       &trans     &trans   /**/ &trans    &trans   &trans
            >;
        };
    };
};